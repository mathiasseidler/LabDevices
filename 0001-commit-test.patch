From 011ed1aa60bc6ad4d8f73d2517f7bf867f10378e Mon Sep 17 00:00:00 2001
From: Mathias S <seidler.mat@gmail.com>
Date: Wed, 29 Feb 2012 16:56:50 +0800
Subject: [PATCH 1/2] commit test

---
 FibreCoupling.py   |   49 +++++++++++++++++++++++
 FieldMeasurment.py |   97 +++++++++++++++++++++++++++++++++++++++++++++
 Gui_example.py     |  112 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 MVC_.py            |   50 +++++++++++++++++++++++
 Pyside_test5.py    |   90 +++++++++++++++++++++++++++++++++++++++++
 pyside_6.py        |   41 +++++++++++++++++++
 6 files changed, 439 insertions(+), 0 deletions(-)
 create mode 100644 FibreCoupling.py
 create mode 100644 FieldMeasurment.py
 create mode 100644 Gui_example.py
 create mode 100644 MVC_.py
 create mode 100644 Pyside_test5.py
 create mode 100644 pyside_6.py

diff --git a/FibreCoupling.py b/FibreCoupling.py
new file mode 100644
index 0000000..0024fb2
--- /dev/null
+++ b/FibreCoupling.py
@@ -0,0 +1,49 @@
+'''
+Created on Feb 15, 2012
+
+@author: Mathias Seidler
+'''
+
+from LabDevices.Thorlabs_PM100D import Thorlabs_PM100D
+from LabDevices.NEWPORT_AG_UC2 import NEWPORT_AG_UC2
+from LabDevices.LabDeviceExceptions import Error
+
+import numpy as np
+
+
+class TransStage(NEWPORT_AG_UC2):
+    vertical_channel=2
+    horizontal_channel=1
+    def up(self,steps,stepamplitude):
+        self.RelativeMove(self.vertical_channel, steps, stepamplitude)
+        
+    def down(self,steps,stepamplitude):
+        self.RelativeMove(self.vertical_channel, -steps, stepamplitude)
+        
+    def forwards(self,steps,stepamplitude):
+        self.RelativeMove(self.horizontal_channel, -steps, stepamplitude)
+        
+    def backwards(self,steps,stepamplitude):
+        self.RelativeMove(self.horizontal_channel, steps, stepamplitude)
+
+
+#powermeter  = Thorlabs_PM100D("PM100D")
+#stage       = TransStage('COM3')
+
+
+def measureUp():
+    stepamplitude=3
+    data_power=np.zeros(1000)
+    for i in np.arange(0,999):
+        data_power[i]=powermeter.getPower()
+        stage.up(1, stepamplitude)
+        
+    plt.plot(data_power)
+    plt.show()
+    
+    #get the index of the maximal power. so we know how many steps to move back to get to the position
+    max_index=np.argmax(data_power)
+    stage.down(1000-(max_index+1), stepamplitude)   #max_index+1 because of the indexing which starts at 0
+
+
+
diff --git a/FieldMeasurment.py b/FieldMeasurment.py
new file mode 100644
index 0000000..729b201
--- /dev/null
+++ b/FieldMeasurment.py
@@ -0,0 +1,97 @@
+'''
+Created on 24.02.2012
+
+@author: Mathias
+'''
+from enthought.traits.api import HasTraits, Str, Instance, Array,Button, Any, Enum
+from enthought.traits.ui.api import View, VGroup, HGroup, Item, Controller, spring
+from enthought.chaco.api import Plot, create_line_plot,LinePlot, \
+                         add_default_grids, add_default_axes, ArrayPlotData
+from enthought.enable.component_editor import ComponentEditor
+from enthought.chaco.chaco_plot_editor import ChacoPlotItem
+
+import threading
+from threading import Thread
+from FibreCoupling import TransStage
+from LabDevices.Thorlabs_PM100D import Thorlabs_PM100D
+from enthought.pyface.timer.api import Timer
+
+import numpy as np
+from enthought.pyface.timer.api import Timer
+
+class FieldDataViewer(HasTraits):
+    """ This class just contains the two data arrays that will be updated
+    by the Controller.  The visualization/editor for this class is a
+    Chaco plot.
+    """ 
+    index = Array  
+    data = Array
+    plot_type = Enum("line", "scatter")
+   
+    # This "view" attribute defines how an instance of this class will
+    # be displayed when .edit_traits() is called on it.  (See MyApp.OnInit()
+    # below.)
+    view = View(ChacoPlotItem("index", "data",
+                               type_trait="plot_type",
+                               resizable=True,
+                               x_label="Index",
+                               y_label="Signal",
+                               color="black",
+                               bgcolor="white",
+                               border_visible=True,
+                               border_width=1,
+                               padding_bg_color="lightgray",
+                               width=800,
+                               height=380,
+                               show_label=False),
+                HGroup(spring, Item("plot_type", style='custom'), spring),
+                resizable = True,
+                buttons = ["OK"],
+                width=800, height=500)
+    
+
+#class AquireData(Thread):
+class DAQThread(Thread):
+
+    def run(self):
+        powermeter  = Thorlabs_PM100D("PM100D")
+        while not self.wants_abort:
+            self.field_data.index = np.append(self.field_data.index, len(self.field_data.data)+1)
+            self.field_data.data = np.append(self.field_data.data, float(powermeter.getPower()))
+            import time
+            time.sleep(0.2)
+                  
+     
+class Controller(HasTraits):
+   
+    # A reference to the plot viewer object
+    viewer = Instance(FieldDataViewer,())
+    Start_Measurment=Button
+    print_data=Button
+    capture_thread=Instance(DAQThread)
+    timer = Instance(Timer)
+    thread=Any()
+    view=View(Item('viewer', style='custom', show_label=False), 
+              'Start_Measurment', 'print_data',
+                resizable=True)
+                  
+    def _Start_Measurment_fired(self):
+        #self.timer=Timer(100, self.timer_tick)
+        #self.thread=Thread(target=self.timer_tick)
+        #self.thread.start()
+        if self.capture_thread and self.capture_thread.isAlive():
+            self.capture_thread.wants_abort = True
+        else:
+            self.capture_thread = DAQThread()
+            self.capture_thread.wants_abort = False
+            self.capture_thread.field_data = self.viewer
+            self.capture_thread.start()
+            
+    def _print_data_fired(self):
+        print self.viewer.data
+        print self.viewer.index
+        
+c = Controller()
+c.configure_traits()
+    
+    
diff --git a/Gui_example.py b/Gui_example.py
new file mode 100644
index 0000000..ecda9c6
--- /dev/null
+++ b/Gui_example.py
@@ -0,0 +1,112 @@
+
+"""
+
+"""
+# Imports:
+from enthought.traits.api import HasTraits, Str, Instance, Array, Button, Any, Enum, Int, Event
+from enthought.traits.ui.api import View, VGroup, HGroup, Item, Controller
+from enthought.traits.ui.editors import ButtonEditor
+from enthought.chaco.api import Plot, create_line_plot,LinePlot, \
+                         add_default_grids, add_default_axes, ArrayPlotData, jet
+from enthought.enable.component_editor import ComponentEditor
+from enthought.chaco.chaco_plot_editor import ChacoPlotItem
+
+import threading
+from threading import Thread
+from FibreCoupling import TransStage
+from LabDevices.Thorlabs_PM100D import Thorlabs_PM100D
+from enthought.pyface.timer.api import Timer
+from matplotlib import rc
+import numpy as np
+
+class FieldData ( HasTraits ):
+    """ Data and Index of the field
+    """  
+    # A name:
+    intensity_map = Array
+    data = Array
+    index = Array
+
+class CaptureThread(Thread):
+    def run(self):
+        try:
+            power_meter  = Thorlabs_PM100D("PM100D")
+            stage       = TransStage('COM3')   
+        except:
+            print "Devices not available"
+            
+        while not self.wants_abort:
+                #data_power[i]=powermeter.getPower()
+            stage.backwards(1, self.stepamplitude)
+            import time
+            time.sleep(0.1)
+            self.fd.index = np.append(self.fd.index,len(self.fd.data)+1)
+            self.fd.data = np.append(self.fd.data,power_meter.getPower()*10E7)
+            self.plotdata.set_data('x',self.fd.index)
+            self.plotdata.set_data('y', self.fd.data)
+            
+            #print "length index: " + str(len(self.fd.index)) + "length data: " + str(len(self.fd.data)) 
+            #print  'Index: ' + str(self.fd.index)+ 'Data: ' + str(self.fd.data)
+
+
+
+class FieldDataController(Controller):
+    """ Define a combined controller/view class that validates that
+        MyModel.name is consistent with the 'allow_empty_string' flag.
+    """
+    model=Instance(FieldData)
+    plot=Instance(Plot,())
+    capture_thread=Instance(CaptureThread) 
+    plotdata=Instance(ArrayPlotData)
+    timer = Instance(Timer)
+    renderer = Any()
+    step_amplitude = Int(1)
+    
+    thread_control = Event
+    label_button_measurment = Str('Start acquisition')
+
+    # Define the view associated with this controller:
+    view = View(Item('controller.thread_control' , label="Acquisition", editor = ButtonEditor(label_value = 'label_button_measurment')),
+                'controller.step_amplitude',
+                Item('controller.plot',editor=ComponentEditor(),show_label=False),
+                resizable=True)
+    
+    def __init__(self,*args, **kw):
+        super(FieldDataController, self).__init__(*args, **kw)
+        #self.plotdata = ArrayPlotData(x = self.model.index, y = self.model.data)
+        self.plotdata = ArrayPlotData()
+        self.plotdata.set_data("imagedata", self.model.intensity_map)
+        plot = Plot(self.plotdata)
+        plot.contour_plot('imagedata',type='poly',name='Intensity map',poly_cmap=jet)
+        plot.x_axis.title = 'Index'
+        plot.y_axis.title = r'Power [$\mu$W]'
+        self.renderer = plot.plot(("x", "y"), type="line", color="black")
+        self.plot = plot
+      
+        #add_default_grids(self.plot)
+        #add_default_axes(self.plot)
+        
+    def _thread_control_fired(self):
+        # if not self.running:
+        if self.capture_thread and self.capture_thread.isAlive():
+            self.capture_thread.wants_abort = True
+            self.label_button_measurment = 'Start acquisition'
+        else:
+            self.capture_thread = CaptureThread()
+            self.capture_thread.wants_abort = False
+            self.capture_thread.fd = self.model
+            self.capture_thread.plotdata= self.plotdata
+            self.capture_thread.stepamplitude = self.step_amplitude
+            self.capture_thread.start()
+            self.label_button_measurment = 'Stop acquisition'
+            #import time
+            #time.sleep(0.1)
+            
+    def _step_amplitude_changed(self):
+        if self.capture_thread:
+            self.capture_thread.stepamplitude = self.step_amplitude
+        
+    
+ui = FieldDataController(FieldData(index=np.array([]),data=np.array([])))
+ui.configure_traits()
+    
diff --git a/MVC_.py b/MVC_.py
new file mode 100644
index 0000000..273bf45
--- /dev/null
+++ b/MVC_.py
@@ -0,0 +1,50 @@
+from threading import Thread
+from time import sleep
+from enthought.traits.api import *
+from enthought.traits.ui.api import View, Item, ButtonEditor
+
+class TextDisplay(HasTraits):
+    string =  String()
+
+    view= View( Item('string',show_label=False, springy=True, style='custom' ))
+
+
+class CaptureThread(Thread):
+    def run(self):
+        self.display.string = 'Camera started\n' + self.display.string
+        n_img = 0
+        while not self.wants_abort:
+            sleep(3)
+            n_img += 1
+            self.display.string = '%d image captured\n' % n_img \
+                                                    + self.display.string
+        self.display.string = 'Camera stopped\n' 5520./+ self.display.string
+
+class Camera(HasTraits):
+    start_stop_capture = Button()
+    display = Instance(TextDisplay)
+    capture_thread = Instance(CaptureThread)
+
+    view = View( Item('start_stop_capture', show_label=False ))
+
+    def _start_stop_capture_fired(self):
+        if self.capture_thread and self.capture_thread.isAlive():
+            self.capture_thread.wants_abort = True
+        else:
+            self.capture_thread = CaptureThread()
+            self.capture_thread.wants_abort = False
+            self.capture_thread.display = self.display
+            self.capture_thread.start()
+
+class MainWindow(HasTraits):
+    display = Instance(TextDisplay, ())
+    camera = Instance(Camera)
+
+    def _camera_default(self):
+        return Camera(display=self.display)
+
+    view = View('display', 'camera', style="custom", resizable=True)
+
+
+if __name__ == '__main__':
+    MainWindow().configure_traits()
diff --git a/Pyside_test5.py b/Pyside_test5.py
new file mode 100644
index 0000000..fb0a974
--- /dev/null
+++ b/Pyside_test5.py
@@ -0,0 +1,90 @@
+#!/usr/bin/env python
+"""
+Draws a contour polygon plot with a contour line plot on top
+ - Left-drag pans the plot.
+ - Mousewheel up and down zooms the plot in and out.
+ - Pressing "z" brings up the Zoom Box, and you can click-drag a rectangular
+   region to zoom.  If you use a sequence of zoom boxes, pressing alt-left-arrow
+   and alt-right-arrow moves you forwards and backwards through the "zoom
+   history".
+"""
+# Major library imports
+from numpy import cosh, exp, linspace, meshgrid, pi, tanh
+from enthought.enable.example_support import DemoFrame, demo_main
+# Enthought library imports
+from enthought.enable.api import Component, ComponentEditor, Window
+from enthought.traits.api import HasTraits, Instance
+from enthought.traits.ui.api import Item, Group, View
+# Chaco imports
+from enthought.chaco.api import ArrayPlotData, jet, Plot
+from enthought.chaco.tools.api import PanTool, ZoomTool
+#===============================================================================
+# # Create the Chaco plot.
+#===============================================================================
+def _create_plot_component():
+    # Create a scalar field to contour
+    xs = linspace(-2*pi, 2*pi, 600)
+    ys = linspace(-1.5*pi, 1.5*pi, 300)
+    x, y = meshgrid(xs,ys)
+    z = tanh(x*y/6)*cosh(exp(-y**2)*x/3)
+    z = x*y
+    # Create a plot data obect and give it this data
+    pd = ArrayPlotData()
+    pd.set_data("imagedata", z)
+    # Create a contour polygon plot of the data
+    plot = Plot(pd, default_origin="top left")
+    plot.contour_plot("imagedata", 
+                      type="poly",
+                      poly_cmap=jet,
+                      xbounds=(xs[0], xs[-1]), 
+                      ybounds=(ys[0], ys[-1]))
+    #Create a contour line plot for the data, too
+    plot.contour_plot("imagedata", 
+                     type="line",
+                     xbounds=(xs[0], xs[-1]), 
+                     ybounds=(ys[0], ys[-1]))
+    #Tweak some of the plot properties
+    plot.title = "My First Contour Plot"
+    plot.padding = 50
+    plot.bg_color = "white"
+    plot.fill_padding = True 
+    # Attach some tools to the plot
+    plot.tools.append(PanTool(plot))
+    zoom = ZoomTool(component=plot, tool_mode="box", always_on=False)
+    plot.overlays.append(zoom)
+    return plot
+#===============================================================================
+# Attributes to use for the plot view.
+size = (800, 600)
+title = "Basic Contour Plot"
+       
+#===============================================================================
+# # Demo class that is used by the demo.py application.
+#===============================================================================
+class Demo(HasTraits):
+    plot = Instance(Component)
+   
+    traits_view = View(
+                    Group(
+                        Item('plot', editor=ComponentEditor(size=size), 
+                             show_label=False),
+                        orientation = "vertical"),
+                    resizable=True, title=title
+                    )
+   
+    def _plot_default(self):
+         return _create_plot_component()
+   
+demo = Demo()
+#===============================================================================
+# Stand-alone frame to display the plot.
+#===============================================================================
+class PlotFrame(DemoFrame):
+    def _create_window(self):
+        # Return a window containing our plots
+        return Window(self, -1, component=_create_plot_component())
+   
+if __name__ == "__main__":
+    demo_main(PlotFrame, size=size, title=title)
+   
+#--EOF---
\ No newline at end of file
diff --git a/pyside_6.py b/pyside_6.py
new file mode 100644
index 0000000..a7d0996
--- /dev/null
+++ b/pyside_6.py
@@ -0,0 +1,41 @@
+'''
+Created on Feb 20, 2012
+
+@author: Mathias
+'''
+import sys
+from numpy import arange, sin, array
+from PySide.QtCore import *
+from PySide.QtGui import *
+
+app = QApplication(sys.argv)
+
+from enthought.etsconfig.etsconfig import ETSConfig
+ETSConfig.toolkit = "qt4"
+#from enthought.enable.api import Window
+#from enthought.chaco.api import ArrayPlotData, Plot
+
+from enthought.traits.api import HasTraits, Instance
+from enthought.traits.ui.api import View, Item
+from enthought.chaco.api import Plot, ArrayPlotData
+from enthought.enable.component_editor import ComponentEditor
+from numpy import linspace, sin
+
+class ScatterPlot(HasTraits):
+    plot = Instance(Plot)
+    traits_view = View(
+        Item('plot',editor=ComponentEditor(), show_label=False),
+        width=500, height=500, resizable=True, title="Chaco Plot")
+
+    def __init__(self):
+        super(ScatterPlot, self).__init__()
+        x = linspace(-14, 14, 100)
+        y = sin(x) * x**3
+        plotdata = ArrayPlotData(x = x, y = y)
+        plot = Plot(plotdata)
+        plot.plot(("x", "y"), type="scatter", color="blue")
+        plot.title = "sin(x) * x^3"
+        self.plot = plot
+
+if __name__ == "__main__":
+    ScatterPlot().configure_traits()
\ No newline at end of file
-- 
1.7.9.msysgit.0

